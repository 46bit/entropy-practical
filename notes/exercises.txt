LFSR bits cycle length
tap sequences
random tests to judge their own generator
investigate pseudorandomness
as well as the breaking ones in use?
they clearly want both of them
drop the mersenne, do ^

exercise 1
  discourage people from building their own
  - for a particular design (LFSR), the parameters chosen (which bits to tap) hugely affect output
    - <16-bit, so enumerable?
    - people twiddle the bits tapped and aim for a maximal cycle
    - cycle lengths (use enumeration to display them)
    - output patterns
    - entropy scores?
    - my visualisations
    - NIST random toolkit scores
  - demonstrates the difficulty and danger inherent in rolling your own
exercise 2
  emphasise importance of seeding/using correctly
  - for a CSPRNG usecase, exploit poor seeding and demonstrate it
    - usecases: slot machine, TCP packet numbers?
    - seeding with timestamp, or something in the scenario people can uncover?
