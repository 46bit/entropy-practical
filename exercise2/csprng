#!/usr/bin/env python

# PYTHONPATH=$PYTHONPATH:$PWD/Tyche:$PWD/prng-exercise ./csprng

import sys, random, time, socket, struct, threading, exercise2
# @TODO: ensure PyCrypto installed?

class NumberServerThread(threading.Thread):
  def __init__(self, csprng_wrapper):
    threading.Thread.__init__(self)
    self.csprng_wrapper = csprng_wrapper

  def run(self):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.bind(("127.0.0.1", 4646))
    s.listen(5)
    try:
      while True:
        client, address = s.accept()
        sys.stdout.write("Client={}".format(address))
        sys.stdout.flush()
        self.serve_client(client)
    finally:
      s.shutdown(1)
      s.close()

  def serve_client(self, client):
    csprng_current_value = self.csprng_wrapper.get_current_value()
    csprng_tick_count = self.csprng_wrapper.tick_count

    # Only send any data before closing if the current value is unused.
    try:
      if csprng_current_value is not False:
        packer = struct.Struct('I I')
        packed_data = packer.pack(csprng_current_value, csprng_tick_count)
        client.sendall(packed_data)
    finally:
      client.close()

# Pseudorandomly (MT) assign how long ago the server was supposedly started, between 255 and 510
# seconds. This makes it feel a little more realistic.
demo_start_time_backdating = random.randint(0xff, 0xff*2)
start_time = int(time.time()) - demo_start_time_backdating
print "seed = %s" % seed

csprng = exercise2.CsprngSingleAccess(start_time, write_dots=True)
csprng.advance(demo_start_time_backdating)

def tick_detect_timejumps():
  global csprng

  # In some circumstances, the starting unix timestamp will no longer be ~tick_count seconds ago.
  # * Time taken to schedule the next tick.
  #   The next tick is scheduled before this one is performed, by TickThread, but this still takes
  #   some amount of time. Thus tick_count will be slightly lower over time than the system clock.
  # * System suspend, on an Operating System or Virtualiser level.
  #   Both will cause a gap where time advanced and yet tick_count did not. It may not be easy to
  #   detect the latter except by noticing time gaps, hence this fix.
  # * Clock drift.
  #
  # The break the students are doing depends on the start time being ~tick_count seconds ago. Thus in
  # all these circumstances we restart the CSPRNG with the same seed but to now have executed the correct
  # number of ticks, current_unix_time - start_unix_time.
  #
  # Drawback: This occurring during a break executing may well have unfortunate side-effects, the
  # 'jump' preventing it from correctly finding the start time. Unfortunately engineering around this
  # issue would further negate any sense of this program intending to be secure.
  expected_tick_count = int(time.time()) - start_time
  performed_tick_count = csprng.tick_count
  timejump_error = expected_tick_count - performed_tick_count
  if abs(timejump_error) > 3:
    sys.stdout.write("TimeJump=(%d %d %d)" % (timejump_error, expected_tick_count, performed_tick_count))
    sys.stdout.flush()
    csprng.reseed(start_time)
    csprng.advance(expected_tick_count)
  else:
    csprng.tick()

tick_thread = exercise2.TickThread(tick_detect_timejumps, 1)
tick_thread.daemon = True
tick_thread.start()

number_server_thread = NumberServerThread(csprng)
number_server_thread.daemon = True
number_server_thread.start()

while True:
  time.sleep(1)
