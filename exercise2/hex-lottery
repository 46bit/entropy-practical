#!/usr/bin/env python

# PYTHONPATH=$PYTHONPATH:$PWD/Tyche:$PWD/prng-exercise ./hex-lottery

import os, sys, readchar, random, time, socket, string, struct, exercise2

shell_is_interactive = os.isatty(sys.stdout.fileno())

# Get data from CSPRNG Numbers Server.
# N.B. By choice I would get this after the symbols have been chosen by the user,
# for no particularly strong reason, but it would make timing harder for students.
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("127.0.0.1", 4646))
packer = struct.Struct('I I')
data = s.recv(packer.size)
if len(data) == 0:
  print ":: Another game was already taking place. Please try again in a moment."
  sys.exit(1)
result_u32, tick_count_u32 = packer.unpack(data)
result = exercise2.Reels(result_u32)

_banner = """\
############################################
***       THE HEXADECIMAL LOTTERY        ***
***     Reward doubles every minute!     ***
############################################

*** This is MINUTE {}
    It's ${:,} a play
    For a ${:,} jackpot!
"""

def banner(minute):
  return _banner.format(minute, 2**minute, 2**(minute+10))

print banner(tick_count_u32 / 60)

# if shell_is_interactive:
#   sys.stdout.write(":: Would you like to play? [Y/n] ")
#   c = readchar.readchar()
#   print c
#   if c.lower() == "n":
#     print "   OK. See you next time!"
#     sys.exit(0)

# Have user pick their reel symbols.
hex09af = string.hexdigits[:16]
if len(sys.argv) >= 2:
  choice = exercise2.Reels.from_reels(sys.argv[1])
  print(":: You chose to play {}\n".format(choice))
else:
  sys.stdout.write(":: Which 8 symbols do you want to pick? [ffffffff] ")
  choice = exercise2.Reels(0xffffffff)
  chosen_chars = []
  while len(chosen_chars) < 8:
    c = readchar.readchar()
    if c in hex09af:
      chosen_chars.append(c)
      sys.stdout.write(c)
      sys.stdout.flush()
    elif c.isspace() and len(chosen_chars) == 0:
      break
  if len(chosen_chars) == 8:
    choice = exercise2.Reels.from_reels("".join(chosen_chars))
  print "\n"

# if shell_is_interactive:
#   sys.stdout.write(":: Would you like to play? [Y/n] ")
#   c = readchar.readchar()
#   print c
#   if c.lower() == "n":
#     print "   OK. See you next time!"
#     sys.exit(0)

class ReelMachine(object):
  def __init__(self, result, choice, cycles_before_result=1):
    self.result = result
    self.choice = choice
    self.cycles_before_result = cycles_before_result

    # The start point does not require cryptographic security. It is purely a UI element
    # and entirely decoupled from the result stage.
    start = exercise2.Reels(random.randint(0, 0xffffffff)) # inclusive
    self.current = start
    self.cycle_step = 0
    self.result_reached = False

  def tick(self):
    if self.cycles_before_result > 0:
      self.tick_cycle()
    else:
      self.tick_result()

    return not self.result_reached

  def tick_cycle(self):
    for reel in range(0, 8):
      self.current.advance_reel(reel)

    self.cycle_step += 1
    if self.cycle_step == 16:
      self.cycle_step = 0
      self.cycles_before_result -= 1

  def tick_result(self):
    self.result_reached = True
    for reel in range(0, 8):
      if self.current[reel] != self.result[reel]:
        self.current.advance_reel(reel)
        self.result_reached = False

  def advance_reel(self, reel):
    reel_value = exercise2.hex09af.index(self.current_reels[reel])
    reel_value = (reel_value + 1) % 16
    self.current_reels[reel] = exercise2.hex09af[reel_value]

  def won(self):
    return self.result == self.choice

# @TODO: From CSPRNG.
rm = ReelMachine(result, choice, 2)

print """\
        7 6 5 4 3 2 1 0
TO WIN  %s\
""" % rm.choice

if shell_is_interactive:
  def tick():
    result_not_reached = rm.tick()
    # Print current reels.
    sys.stdout.write("\rDRAWN   " + str(rm.current))
    sys.stdout.flush()
    # Pass through return value.
    return result_not_reached

  thread = exercise2.TickThread(tick, 0.1)
  thread.start()
  thread.join()

  # Sleep for half a second, so people see the drawing end.
  time.sleep(0.5)
else:
  sys.stdout.write("DRAWN   " + str(rm.result))

print "\n"
if rm.won():
  print ":: YOU WON! Congratulations."
  print "   The HEXADECIMAL LOTTERY regrets it cannot pay your winnings."
  print "   The lottery has become insolvent from an unexpected volume of wins."
  print "   Instead, have a cute rabbit. https://www.flickr.com/photos/hepp/214184243/"
else:
  print ":: You didn't win! :-("
