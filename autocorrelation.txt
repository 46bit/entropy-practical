(x_i - mean)(x_j - mean)
________________________
        variance

for a random sequence, the variance should be
https://en.wikipedia.org/wiki/Variance#Discrete_random_variable
 0.5*(0-0.5)**2 + 0.5*(1.0-0.5)**2 = 0.25

(x_i - 0.5)(x_j - 0.5) / variance

(x_i.x_j - 0.5x_i - 0.5x_j + 0.25) / variance

# Noticing the pattern in 0,1,0,1...
# The mean will be 0.5
# The variance will be 0.25

o = [0,1]*1000

# Yet the autocorrelation for bits n and n+2 is *always* 1.0
# Thus the summed autocorrelation over o will be 1.0*len(o)
# It should average out 1.0 + -1.0 + ... = ~0 for an uncorrelated sequence

def ac(a, b)
  return (a - 0.5)*(b - 0.5)/0.25
end

o.each_with_index do |a, i|
  b = o[i + 2]
  break if b.nil?
  puts "#{a} #{b} #{ac(a, b)}"
end; nil

o.each_with_index do |a, i|
  b = o[i + 1]
  break if b.nil?
  puts "#{a} #{b} #{ac(a, b)}"
end; nil

def c(o, j)
  aci_sum = 0.0
  o.each_with_index do |a, i|
    b = o[i + j]
    break if b.nil?
    aci = ac(a, b)
    aci_sum = aci_sum + aci
    puts "#{a} #{b} #{aci}"
  end
  return aci_sum
end

def randu(seed = 1073743)
  # x_(n+1) = (2**16 + 3)x_n mod 2**31
  two_16th_power = 2**16
  two_31st_power = 2**31
  o = [seed]
  5000.times do |i|
    oi = ((two_16th_power + 3) * o[i]) % two_31st_power
    last_3_bits = oi.to_s(2)[-4,3]
    continue if last_3_bits.length < 3
    #puts oi, last_3_bits
    print last_3_bits
    o.push(oi)
  end
  return o
end

def randuac(seed = 1073743)
  o = [seed]

  # x_(n+1) = (2**16 + 3)x_n mod 2**31
  two_16th_power = 2**16
  two_31st_power = 2**31
  o = [seed]
  5000.times do |i|
    oi = ((two_16th_power + 3) * o[i]) % two_31st_power
    last_3_bits = oi.to_s(2)[-4,3]
    continue if last_3_bits.length < 3
    #puts oi, last_3_bits
    print last_3_bits
    o.push(oi)
  end
  return o
end
